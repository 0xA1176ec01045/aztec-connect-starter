/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  HeapTestContract,
  HeapTestContractInterface,
} from "../HeapTestContract";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint32",
        name: "initialSize",
        type: "uint32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "HEAP_EMPTY",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "value",
        type: "uint64",
      },
    ],
    name: "add",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "min",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pop",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "value",
        type: "uint64",
      },
    ],
    name: "remove",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "size",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000fa938038062000fa9833981810160405281019062000037919062000156565b620000528160006200005960201b620001361790919060201c565b50620001e9565b60005b8163ffffffff168163ffffffff161015620000e7578260000167ffffffffffffffff90806001815401808255809150506001900390600052602060002090600491828204019190066008029091909190916101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508080620000de90620001b7565b9150506200005c565b5060008260010160006101000a81548163ffffffff021916908363ffffffff1602179055505050565b600080fd5b600063ffffffff82169050919050565b620001308162000115565b81146200013c57600080fd5b50565b600081519050620001508162000125565b92915050565b6000602082840312156200016f576200016e62000110565b5b60006200017f848285016200013f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620001c48262000115565b915063ffffffff821415620001de57620001dd62000188565b5b600182019050919050565b610db080620001f96000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80637b8811961461005c578063949d225d1461007857806399cc7d0514610096578063a4ece52c146100b2578063f8897945146100bc575b600080fd5b61007660048036038101906100719190610a9d565b6100da565b005b6100806100f1565b60405161008d9190610ae3565b60405180910390f35b6100b060048036038101906100ab9190610a9d565b610102565b005b6100ba610119565b005b6100c4610125565b6040516100d19190610b0d565b60405180910390f35b6100ee8160006101e990919063ffffffff16565b50565b60006100fd60006101f7565b905090565b61011681600061021b90919063ffffffff16565b50565b6101236000610229565b565b60006101316000610235565b905090565b60005b8163ffffffff168163ffffffff1610156101c0578260000167ffffffffffffffff90806001815401808255809150506001900390600052602060002090600491828204019190066008029091909190916101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555080806101b890610b67565b915050610139565b5060008260010160006101000a81548163ffffffff021916908363ffffffff1602179055505050565b6101f382826102c1565b5050565b60008160010160009054906101000a900463ffffffff1663ffffffff169050919050565b610225828261040f565b5050565b61023281610541565b50565b600080610241836101f7565b1415610279576040517f9622ab6100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b816000016000815481106102905761028f610b94565b5b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff169050919050565b81600001805490508260010160009054906101000a900463ffffffff1663ffffffff16141561034757816000018190806001815401808255809150506001900390600052602060002090600491828204019190066008029091909190916101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506103b4565b80826000018360010160009054906101000a900463ffffffff1663ffffffff168154811061037857610377610b94565b5b90600052602060002090600491828204019190066008026101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b600082600101600081819054906101000a900463ffffffff16809291906103da90610b67565b91906101000a81548163ffffffff021916908363ffffffff16021790555063ffffffff16905061040a838261089c565b505050565b60005b8260010160009054906101000a900463ffffffff1663ffffffff168110801561048e57508167ffffffffffffffff1683600001828154811061045757610456610b94565b5b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff1667ffffffffffffffff1614155b156104a4578061049d90610bc3565b9050610412565b8260010160009054906101000a900463ffffffff1663ffffffff168114156104cc575061053d565b600081146105325760008360000182815481106104ec576104eb610b94565b5b90600052602060002090600491828204019190066008026101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550610531838261089c565b5b61053b83610541565b505b5050565b60008160010160009054906101000a900463ffffffff1663ffffffff16141561056957610899565b60008160000182600101600081819054906101000a900463ffffffff1661058f90610c0c565b91906101000a81548163ffffffff021916908363ffffffff160217905563ffffffff16815481106105c3576105c2610b94565b5b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff16905060005b8260010160009054906101000a900463ffffffff1663ffffffff1681101561089657600060016002836106259190610c36565b61062f9190610c90565b905060006001826106409190610c90565b9050600083905060008590508660010160009054906101000a900463ffffffff1663ffffffff16841080156106c757508067ffffffffffffffff1687600001858154811061069157610690610b94565b5b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff1667ffffffffffffffff16105b15610712578391508660000184815481106106e5576106e4610b94565b5b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff1690505b8660010160009054906101000a900463ffffffff1663ffffffff168310801561078d57508067ffffffffffffffff1687600001848154811061075757610756610b94565b5b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff1667ffffffffffffffff16105b15610796578291505b848214156107f957808760000186815481106107b5576107b4610b94565b5b90600052602060002090600491828204019190066008026101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555050505050610896565b86600001828154811061080f5761080e610b94565b5b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff1687600001868154811061084f5761084e610b94565b5b90600052602060002090600491828204019190066008026101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550819450505050506105f2565b50505b50565b60008260000182815481106108b4576108b3610b94565b5b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff1690505b6000821115610a0157600060026001846108fb9190610ce6565b6109059190610d49565b90508167ffffffffffffffff1684600001828154811061092857610927610b94565b5b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff1667ffffffffffffffff16116109675750610a01565b83600001818154811061097d5761097c610b94565b5b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff168460000184815481106109bd576109bc610b94565b5b90600052602060002090600491828204019190066008026101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550809250506108e1565b80836000018381548110610a1857610a17610b94565b5b90600052602060002090600491828204019190066008026101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550505050565b600080fd5b600067ffffffffffffffff82169050919050565b610a7a81610a5d565b8114610a8557600080fd5b50565b600081359050610a9781610a71565b92915050565b600060208284031215610ab357610ab2610a58565b5b6000610ac184828501610a88565b91505092915050565b6000819050919050565b610add81610aca565b82525050565b6000602082019050610af86000830184610ad4565b92915050565b610b0781610a5d565b82525050565b6000602082019050610b226000830184610afe565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600063ffffffff82169050919050565b6000610b7282610b57565b915063ffffffff821415610b8957610b88610b28565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610bce82610aca565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c0157610c00610b28565b5b600182019050919050565b6000610c1782610b57565b91506000821415610c2b57610c2a610b28565b5b600182039050919050565b6000610c4182610aca565b9150610c4c83610aca565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610c8557610c84610b28565b5b828202905092915050565b6000610c9b82610aca565b9150610ca683610aca565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610cdb57610cda610b28565b5b828201905092915050565b6000610cf182610aca565b9150610cfc83610aca565b925082821015610d0f57610d0e610b28565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610d5482610aca565b9150610d5f83610aca565b925082610d6f57610d6e610d1a565b5b82820490509291505056fea26469706673582212202907e17eff350d0832fd424de640d7e01e6264758fad5521eef43a976214723a64736f6c634300080a0033";

type HeapTestContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: HeapTestContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class HeapTestContract__factory extends ContractFactory {
  constructor(...args: HeapTestContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "HeapTestContract";
  }

  deploy(
    initialSize: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<HeapTestContract> {
    return super.deploy(
      initialSize,
      overrides || {}
    ) as Promise<HeapTestContract>;
  }
  getDeployTransaction(
    initialSize: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(initialSize, overrides || {});
  }
  attach(address: string): HeapTestContract {
    return super.attach(address) as HeapTestContract;
  }
  connect(signer: Signer): HeapTestContract__factory {
    return super.connect(signer) as HeapTestContract__factory;
  }
  static readonly contractName: "HeapTestContract";
  public readonly contractName: "HeapTestContract";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): HeapTestContractInterface {
    return new utils.Interface(_abi) as HeapTestContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): HeapTestContract {
    return new Contract(address, _abi, signerOrProvider) as HeapTestContract;
  }
}
