/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { StdStorage, StdStorageInterface } from "../StdStorage";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "who",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes4",
        name: "fsig",
        type: "bytes4",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "keysHash",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "slot",
        type: "uint256",
      },
    ],
    name: "SlotFound",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "who",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "slot",
        type: "uint256",
      },
    ],
    name: "WARNING_UninitedSlot",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "b",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "offset",
        type: "uint256",
      },
    ],
    name: "bytesToBytes32",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x6104a8610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063535849391461003a575b600080fd5b610054600480360381019061004f919061028b565b61006a565b6040516100619190610300565b60405180910390f35b60008060005b60208110156100f057600881610086919061034a565b60ff60f81b86838761009891906103a4565b815181106100a9576100a86103fa565b5b602001015160f81c60f81b167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c8217915080806100e890610429565b915050610070565b508091505092915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61016282610119565b810181811067ffffffffffffffff821117156101815761018061012a565b5b80604052505050565b60006101946100fb565b90506101a08282610159565b919050565b600067ffffffffffffffff8211156101c0576101bf61012a565b5b6101c982610119565b9050602081019050919050565b82818337600083830152505050565b60006101f86101f3846101a5565b61018a565b90508281526020810184848401111561021457610213610114565b5b61021f8482856101d6565b509392505050565b600082601f83011261023c5761023b61010f565b5b813561024c8482602086016101e5565b91505092915050565b6000819050919050565b61026881610255565b811461027357600080fd5b50565b6000813590506102858161025f565b92915050565b600080604083850312156102a2576102a1610105565b5b600083013567ffffffffffffffff8111156102c0576102bf61010a565b5b6102cc85828601610227565b92505060206102dd85828601610276565b9150509250929050565b6000819050919050565b6102fa816102e7565b82525050565b600060208201905061031560008301846102f1565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061035582610255565b915061036083610255565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156103995761039861031b565b5b828202905092915050565b60006103af82610255565b91506103ba83610255565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156103ef576103ee61031b565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061043482610255565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156104675761046661031b565b5b60018201905091905056fea2646970667358221220ade19275a067862bc6240ff174ae9281682110e2bab985d91286f3e9df4e202164736f6c634300080a0033";

type StdStorageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StdStorageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StdStorage__factory extends ContractFactory {
  constructor(...args: StdStorageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "StdStorage";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<StdStorage> {
    return super.deploy(overrides || {}) as Promise<StdStorage>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): StdStorage {
    return super.attach(address) as StdStorage;
  }
  connect(signer: Signer): StdStorage__factory {
    return super.connect(signer) as StdStorage__factory;
  }
  static readonly contractName: "StdStorage";
  public readonly contractName: "StdStorage";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StdStorageInterface {
    return new utils.Interface(_abi) as StdStorageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StdStorage {
    return new Contract(address, _abi, signerOrProvider) as StdStorage;
  }
}
