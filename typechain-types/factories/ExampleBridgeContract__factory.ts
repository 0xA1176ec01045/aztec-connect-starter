/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ExampleBridgeContract,
  ExampleBridgeContractInterface,
} from "../ExampleBridgeContract";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_rollupProcessor",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "erc20Address",
            type: "address",
          },
          {
            internalType: "enum AztecTypes.AztecAssetType",
            name: "assetType",
            type: "uint8",
          },
        ],
        internalType: "struct AztecTypes.AztecAsset",
        name: "inputAssetA",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "erc20Address",
            type: "address",
          },
          {
            internalType: "enum AztecTypes.AztecAssetType",
            name: "assetType",
            type: "uint8",
          },
        ],
        internalType: "struct AztecTypes.AztecAsset",
        name: "inputAssetB",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "erc20Address",
            type: "address",
          },
          {
            internalType: "enum AztecTypes.AztecAssetType",
            name: "assetType",
            type: "uint8",
          },
        ],
        internalType: "struct AztecTypes.AztecAsset",
        name: "outputAssetA",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "erc20Address",
            type: "address",
          },
          {
            internalType: "enum AztecTypes.AztecAssetType",
            name: "assetType",
            type: "uint8",
          },
        ],
        internalType: "struct AztecTypes.AztecAsset",
        name: "outputAssetB",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "totalInputValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "interactionNonce",
        type: "uint256",
      },
      {
        internalType: "uint64",
        name: "auxData",
        type: "uint64",
      },
      {
        internalType: "address",
        name: "rollupBeneficiary",
        type: "address",
      },
    ],
    name: "convert",
    outputs: [
      {
        internalType: "uint256",
        name: "outputValueA",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "outputValueB",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "isAsync",
        type: "bool",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "erc20Address",
            type: "address",
          },
          {
            internalType: "enum AztecTypes.AztecAssetType",
            name: "assetType",
            type: "uint8",
          },
        ],
        internalType: "struct AztecTypes.AztecAsset",
        name: "inputAssetA",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "erc20Address",
            type: "address",
          },
          {
            internalType: "enum AztecTypes.AztecAssetType",
            name: "assetType",
            type: "uint8",
          },
        ],
        internalType: "struct AztecTypes.AztecAsset",
        name: "inputAssetB",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "erc20Address",
            type: "address",
          },
          {
            internalType: "enum AztecTypes.AztecAssetType",
            name: "assetType",
            type: "uint8",
          },
        ],
        internalType: "struct AztecTypes.AztecAsset",
        name: "outputAssetA",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "erc20Address",
            type: "address",
          },
          {
            internalType: "enum AztecTypes.AztecAssetType",
            name: "assetType",
            type: "uint8",
          },
        ],
        internalType: "struct AztecTypes.AztecAsset",
        name: "outputAssetB",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "interactionNonce",
        type: "uint256",
      },
      {
        internalType: "uint64",
        name: "auxData",
        type: "uint64",
      },
    ],
    name: "finalise",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "rollupProcessor",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161089f38038061089f833981810160405281019061003291906100cf565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506100fc565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061009c82610071565b9050919050565b6100ac81610091565b81146100b757600080fd5b50565b6000815190506100c9816100a3565b92915050565b6000602082840312156100e5576100e461006c565b5b60006100f3848285016100ba565b91505092915050565b60805161077b6101246000396000818160cf015281816101800152610211015261077b6000f3fe6080604052600436106100345760003560e01c806326c3b515146100395780632a113d6e1461006b5780639b07d34214610096575b600080fd5b610053600480360381019061004e919061044b565b6100c8565b60405161006293929190610530565b60405180910390f35b34801561007757600080fd5b5061008061020f565b60405161008d9190610576565b60405180910390f35b6100b060048036038101906100ab91906105b5565b610233565b6040516100bf93929190610530565b60405180910390f35b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461015b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610152906106a3565b60405180910390fd5b8692508a6020015173ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000896040518363ffffffff1660e01b81526004016101bd9291906106c3565b6020604051808303816000875af11580156101dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102009190610718565b50985098509895505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060008061024257600080fd5b96509650969350505050565b6000604051905090565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6102ab82610262565b810181811067ffffffffffffffff821117156102ca576102c9610273565b5b80604052505050565b60006102dd61024e565b90506102e982826102a2565b919050565b6000819050919050565b610301816102ee565b811461030c57600080fd5b50565b60008135905061031e816102f8565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061034f82610324565b9050919050565b61035f81610344565b811461036a57600080fd5b50565b60008135905061037c81610356565b92915050565b6004811061038f57600080fd5b50565b6000813590506103a181610382565b92915050565b6000606082840312156103bd576103bc61025d565b5b6103c760606102d3565b905060006103d78482850161030f565b60008301525060206103eb8482850161036d565b60208301525060406103ff84828501610392565b60408301525092915050565b600067ffffffffffffffff82169050919050565b6104288161040b565b811461043357600080fd5b50565b6000813590506104458161041f565b92915050565b600080600080600080600080610200898b03121561046c5761046b610258565b5b600061047a8b828c016103a7565b985050606061048b8b828c016103a7565b97505060c061049c8b828c016103a7565b9650506101206104ae8b828c016103a7565b9550506101806104c08b828c0161030f565b9450506101a06104d28b828c0161030f565b9350506101c06104e48b828c01610436565b9250506101e06104f68b828c0161036d565b9150509295985092959890939650565b61050f816102ee565b82525050565b60008115159050919050565b61052a81610515565b82525050565b60006060820190506105456000830186610506565b6105526020830185610506565b61055f6040830184610521565b949350505050565b61057081610344565b82525050565b600060208201905061058b6000830184610567565b92915050565b600080fd5b6000606082840312156105ac576105ab610591565b5b81905092915050565b6000806000806000806101c087890312156105d3576105d2610258565b5b60006105e189828a01610596565b96505060606105f289828a01610596565b95505060c061060389828a01610596565b94505061012061061589828a01610596565b93505061018061062789828a0161030f565b9250506101a061063989828a01610436565b9150509295509295509295565b600082825260208201905092915050565b7f4578616d706c654272696467653a20494e56414c49445f43414c4c4552000000600082015250565b600061068d601d83610646565b915061069882610657565b602082019050919050565b600060208201905081810360008301526106bc81610680565b9050919050565b60006040820190506106d86000830185610567565b6106e56020830184610506565b9392505050565b6106f581610515565b811461070057600080fd5b50565b600081519050610712816106ec565b92915050565b60006020828403121561072e5761072d610258565b5b600061073c84828501610703565b9150509291505056fea264697066735822122015f13608420917f524b76e658d11c6a50ab0e622ea3a074a04cab4491820c95f64736f6c634300080a0033";

type ExampleBridgeContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ExampleBridgeContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ExampleBridgeContract__factory extends ContractFactory {
  constructor(...args: ExampleBridgeContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ExampleBridgeContract";
  }

  deploy(
    _rollupProcessor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ExampleBridgeContract> {
    return super.deploy(
      _rollupProcessor,
      overrides || {}
    ) as Promise<ExampleBridgeContract>;
  }
  getDeployTransaction(
    _rollupProcessor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_rollupProcessor, overrides || {});
  }
  attach(address: string): ExampleBridgeContract {
    return super.attach(address) as ExampleBridgeContract;
  }
  connect(signer: Signer): ExampleBridgeContract__factory {
    return super.connect(signer) as ExampleBridgeContract__factory;
  }
  static readonly contractName: "ExampleBridgeContract";
  public readonly contractName: "ExampleBridgeContract";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExampleBridgeContractInterface {
    return new utils.Interface(_abi) as ExampleBridgeContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ExampleBridgeContract {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ExampleBridgeContract;
  }
}
