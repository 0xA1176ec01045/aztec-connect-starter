/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TestUtil, TestUtilInterface } from "../TestUtil";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    name: "log",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "log_address",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "log_bytes",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "log_bytes32",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    name: "log_int",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "key",
        type: "string",
      },
      {
        indexed: false,
        internalType: "address",
        name: "val",
        type: "address",
      },
    ],
    name: "log_named_address",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "key",
        type: "string",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "val",
        type: "bytes",
      },
    ],
    name: "log_named_bytes",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "key",
        type: "string",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "val",
        type: "bytes32",
      },
    ],
    name: "log_named_bytes32",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "key",
        type: "string",
      },
      {
        indexed: false,
        internalType: "int256",
        name: "val",
        type: "int256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "decimals",
        type: "uint256",
      },
    ],
    name: "log_named_decimal_int",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "key",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "val",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "decimals",
        type: "uint256",
      },
    ],
    name: "log_named_decimal_uint",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "key",
        type: "string",
      },
      {
        indexed: false,
        internalType: "int256",
        name: "val",
        type: "int256",
      },
    ],
    name: "log_named_int",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "key",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "val",
        type: "string",
      },
    ],
    name: "log_named_string",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "key",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "val",
        type: "uint256",
      },
    ],
    name: "log_named_uint",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    name: "log_string",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "log_uint",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "logs",
    type: "event",
  },
  {
    inputs: [],
    name: "IS_TEST",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "dropLiquityPriceByHalf",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "failed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "symbol",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amt",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "seed",
        type: "uint256",
      },
    ],
    name: "rand",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "setLiquityPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "setUpTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405260016000806101000a81548160ff021916908315150217905550737109709ecfa91a80626ff3989d68f67f5b1dd12d600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561007f57600080fd5b506114078061008f6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063a17780211161005b578063a1778021146100ea578063ba414fa6146100f4578063eea9621014610112578063fa7626d41461011c5761007d565b806319f6b499146100825780632530c9051461009e5780637ed9db59146100ce575b600080fd5b61009c60048036038101906100979190610beb565b61013a565b005b6100b860048036038101906100b39190610beb565b6102df565b6040516100c59190610c27565b60405180910390f35b6100e860048036038101906100e39190610cd6565b610328565b005b6100f2610559565b005b6100fc6105fa565b6040516101099190610d44565b60405180910390f35b61011a61060d565b005b610124610abe565b6040516101319190610d44565b60405180910390f35b60008160405161014990610ba3565b6101539190610c27565b604051809103906000f08015801561016f573d6000803e3d6000fd5b509050600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b4d6c782734c517d4e2c851ca76d7ec94b805269df0f2201de8373ffffffffffffffffffffffffffffffffffffffff16803b806020016040519081016040528181526000908060200190933c6040518363ffffffff1660e01b8152600401610215929190610e07565b600060405180830381600087803b15801561022f57600080fd5b505af1158015610243573d6000803e3d6000fd5b505050506000734c517d4e2c851ca76d7ec94b805269df0f2201de90506102da8173ffffffffffffffffffffffffffffffffffffffff16630fdb11cf6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156102b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d49190610e4c565b84610acf565b505050565b60006a084595161401484a000000826040516020016102fe9190610e9a565b6040516020818303038152906040528051906020012060001c6103219190610ee4565b9050919050565b60006003600085815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060006003600086815260200190815260200160002060010154905060008273ffffffffffffffffffffffffffffffffffffffff166370a08231866040518263ffffffff1660e01b81526004016103b99190610f15565b602060405180830381865afa1580156103d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fa9190610e4c565b9050600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370ca10bb84878560405160200161044e929190610f30565b6040516020818303038152906040528051906020012087856104709190610f88565b60001b6040518463ffffffff1660e01b815260040161049193929190610fed565b600060405180830381600087803b1580156104ab57600080fd5b505af11580156104bf573d6000803e3d6000fd5b505050506105518373ffffffffffffffffffffffffffffffffffffffff166370a08231876040518263ffffffff1660e01b81526004016104ff9190610f15565b602060405180830381865afa15801561051c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105409190610e4c565b858361054c9190610f88565b610acf565b505050505050565b6000734c517d4e2c851ca76d7ec94b805269df0f2201de73ffffffffffffffffffffffffffffffffffffffff16630fdb11cf6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156105bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e09190610e4c565b90506105f76002826105f29190611024565b61013a565b50565b600060019054906101000a900460ff1681565b735f98805a4e8be255a32880fdec7f6728c6568ba0600360007f4c55534400000000000000000000000000000000000000000000000000000000815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360007f4c55534400000000000000000000000000000000000000000000000000000000815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360007f4c55534400000000000000000000000000000000000000000000000000000000815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506002600360007f4c5553440000000000000000000000000000000000000000000000000000000081526020019081526020016000206001018190555073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2600360007f5745544800000000000000000000000000000000000000000000000000000000815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360007f5745544800000000000000000000000000000000000000000000000000000000815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360007f5745544800000000000000000000000000000000000000000000000000000000815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060038060007f5745544800000000000000000000000000000000000000000000000000000000815260200190815260200160002060010181905550736dea81c8171d0ba574754ef6f8b412f2ed88c54d600360007f4c51545900000000000000000000000000000000000000000000000000000000815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360007f4c51545900000000000000000000000000000000000000000000000000000000815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360007f4c51545900000000000000000000000000000000000000000000000000000000815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600360007f4c51545900000000000000000000000000000000000000000000000000000000815260200190815260200160002060010181905550565b60008054906101000a900460ff1681565b808214610b82577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610b03906110d8565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a881604051610b3a9190611144565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a882604051610b7191906111be565b60405180910390a1610b81610b86565b5b5050565b6001600060016101000a81548160ff021916908315150217905550565b6101e5806111ed83390190565b600080fd5b6000819050919050565b610bc881610bb5565b8114610bd357600080fd5b50565b600081359050610be581610bbf565b92915050565b600060208284031215610c0157610c00610bb0565b5b6000610c0f84828501610bd6565b91505092915050565b610c2181610bb5565b82525050565b6000602082019050610c3c6000830184610c18565b92915050565b6000819050919050565b610c5581610c42565b8114610c6057600080fd5b50565b600081359050610c7281610c4c565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ca382610c78565b9050919050565b610cb381610c98565b8114610cbe57600080fd5b50565b600081359050610cd081610caa565b92915050565b600080600060608486031215610cef57610cee610bb0565b5b6000610cfd86828701610c63565b9350506020610d0e86828701610cc1565b9250506040610d1f86828701610bd6565b9150509250925092565b60008115159050919050565b610d3e81610d29565b82525050565b6000602082019050610d596000830184610d35565b92915050565b610d6881610c98565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610da8578082015181840152602081019050610d8d565b83811115610db7576000848401525b50505050565b6000601f19601f8301169050919050565b6000610dd982610d6e565b610de38185610d79565b9350610df3818560208601610d8a565b610dfc81610dbd565b840191505092915050565b6000604082019050610e1c6000830185610d5f565b8181036020830152610e2e8184610dce565b90509392505050565b600081519050610e4681610bbf565b92915050565b600060208284031215610e6257610e61610bb0565b5b6000610e7084828501610e37565b91505092915050565b6000819050919050565b610e94610e8f82610bb5565b610e79565b82525050565b6000610ea68284610e83565b60208201915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610eef82610bb5565b9150610efa83610bb5565b925082610f0a57610f09610eb5565b5b828206905092915050565b6000602082019050610f2a6000830184610d5f565b92915050565b6000604082019050610f456000830185610d5f565b610f526020830184610c18565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610f9382610bb5565b9150610f9e83610bb5565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610fd357610fd2610f59565b5b828201905092915050565b610fe781610c42565b82525050565b60006060820190506110026000830186610d5f565b61100f6020830185610fde565b61101c6040830184610fde565b949350505050565b600061102f82610bb5565b915061103a83610bb5565b92508261104a57611049610eb5565b5b828204905092915050565b600082825260208201905092915050565b7f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e60008201527f745d000000000000000000000000000000000000000000000000000000000000602082015250565b60006110c2602283611055565b91506110cd82611066565b604082019050919050565b600060208201905081810360008301526110f1816110b5565b9050919050565b7f2020457870656374656400000000000000000000000000000000000000000000600082015250565b600061112e600a83611055565b9150611139826110f8565b602082019050919050565b6000604082019050818103600083015261115d81611121565b905061116c6020830184610c18565b92915050565b7f2020202041637475616c00000000000000000000000000000000000000000000600082015250565b60006111a8600a83611055565b91506111b382611172565b602082019050919050565b600060408201905081810360008301526111d78161119b565b90506111e66020830184610c18565b9291505056fe60a060405234801561001057600080fd5b506040516101e53803806101e58339818101604052810190610032919061007b565b8060808181525050506100a8565b600080fd5b6000819050919050565b61005881610045565b811461006357600080fd5b50565b6000815190506100758161004f565b92915050565b60006020828403121561009157610090610040565b5b600061009f84828501610066565b91505092915050565b60805161011d6100c860003960008181606d01526093015261011d6000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80630490be831460375780630fdb11cf146051575b600080fd5b603d606b565b6040516048919060ce565b60405180910390f35b6057608f565b6040516062919060ce565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000819050919050565b60c88160b7565b82525050565b600060208201905060e1600083018460c1565b9291505056fea2646970667358221220d0a0a5880855c1d4284fd3bc7a21de8dcb0d4fea5574c74f95885c7f7771e35b64736f6c634300080a0033a2646970667358221220c8cf174cbdd8eb7af3e6247312ffc6d7707c15b3ed9789d0ba73f51319eb02ff64736f6c634300080a0033";

type TestUtilConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestUtilConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestUtil__factory extends ContractFactory {
  constructor(...args: TestUtilConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "TestUtil";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestUtil> {
    return super.deploy(overrides || {}) as Promise<TestUtil>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestUtil {
    return super.attach(address) as TestUtil;
  }
  connect(signer: Signer): TestUtil__factory {
    return super.connect(signer) as TestUtil__factory;
  }
  static readonly contractName: "TestUtil";
  public readonly contractName: "TestUtil";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestUtilInterface {
    return new utils.Interface(_abi) as TestUtilInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestUtil {
    return new Contract(address, _abi, signerOrProvider) as TestUtil;
  }
}
