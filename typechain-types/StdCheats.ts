/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface StdCheatsInterface extends utils.Interface {
  contractName: "StdCheats";
  functions: {
    "deployCode(string,bytes)": FunctionFragment;
    "hoax(address)": FunctionFragment;
    "rewind(uint256)": FunctionFragment;
    "skip(uint256)": FunctionFragment;
    "startHoax(address,uint256)": FunctionFragment;
    "tip(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "deployCode",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "hoax", values: [string]): string;
  encodeFunctionData(
    functionFragment: "rewind",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "skip", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "startHoax",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tip",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "deployCode", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hoax", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rewind", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "skip", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startHoax", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tip", data: BytesLike): Result;

  events: {};
}

export interface StdCheats extends BaseContract {
  contractName: "StdCheats";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StdCheatsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    "deployCode(string,bytes)"(
      what: string,
      args: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deployCode(string)"(
      what: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "hoax(address)"(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "hoax(address,address)"(
      who: string,
      origin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "hoax(address,address,uint256)"(
      who: string,
      origin: string,
      give: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "hoax(address,uint256)"(
      who: string,
      give: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewind(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    skip(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "startHoax(address,uint256)"(
      who: string,
      give: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "startHoax(address,address,uint256)"(
      who: string,
      origin: string,
      give: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "startHoax(address)"(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "startHoax(address,address)"(
      who: string,
      origin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tip(
      token: string,
      to: string,
      give: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  "deployCode(string,bytes)"(
    what: string,
    args: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deployCode(string)"(
    what: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "hoax(address)"(
    who: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "hoax(address,address)"(
    who: string,
    origin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "hoax(address,address,uint256)"(
    who: string,
    origin: string,
    give: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "hoax(address,uint256)"(
    who: string,
    give: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewind(
    time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  skip(
    time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "startHoax(address,uint256)"(
    who: string,
    give: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "startHoax(address,address,uint256)"(
    who: string,
    origin: string,
    give: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "startHoax(address)"(
    who: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "startHoax(address,address)"(
    who: string,
    origin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tip(
    token: string,
    to: string,
    give: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    "deployCode(string,bytes)"(
      what: string,
      args: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "deployCode(string)"(
      what: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "hoax(address)"(who: string, overrides?: CallOverrides): Promise<void>;

    "hoax(address,address)"(
      who: string,
      origin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "hoax(address,address,uint256)"(
      who: string,
      origin: string,
      give: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "hoax(address,uint256)"(
      who: string,
      give: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rewind(time: BigNumberish, overrides?: CallOverrides): Promise<void>;

    skip(time: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "startHoax(address,uint256)"(
      who: string,
      give: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "startHoax(address,address,uint256)"(
      who: string,
      origin: string,
      give: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "startHoax(address)"(who: string, overrides?: CallOverrides): Promise<void>;

    "startHoax(address,address)"(
      who: string,
      origin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tip(
      token: string,
      to: string,
      give: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    "deployCode(string,bytes)"(
      what: string,
      args: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deployCode(string)"(
      what: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "hoax(address)"(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "hoax(address,address)"(
      who: string,
      origin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "hoax(address,address,uint256)"(
      who: string,
      origin: string,
      give: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "hoax(address,uint256)"(
      who: string,
      give: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewind(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    skip(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "startHoax(address,uint256)"(
      who: string,
      give: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "startHoax(address,address,uint256)"(
      who: string,
      origin: string,
      give: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "startHoax(address)"(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "startHoax(address,address)"(
      who: string,
      origin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tip(
      token: string,
      to: string,
      give: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    "deployCode(string,bytes)"(
      what: string,
      args: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deployCode(string)"(
      what: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "hoax(address)"(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "hoax(address,address)"(
      who: string,
      origin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "hoax(address,address,uint256)"(
      who: string,
      origin: string,
      give: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "hoax(address,uint256)"(
      who: string,
      give: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewind(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    skip(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "startHoax(address,uint256)"(
      who: string,
      give: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "startHoax(address,address,uint256)"(
      who: string,
      origin: string,
      give: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "startHoax(address)"(
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "startHoax(address,address)"(
      who: string,
      origin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tip(
      token: string,
      to: string,
      give: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
