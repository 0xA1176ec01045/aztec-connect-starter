/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "DSTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DSTest__factory>;
    getContractFactory(
      name: "StdCheats",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StdCheats__factory>;
    getContractFactory(
      name: "StdError",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StdError__factory>;
    getContractFactory(
      name: "StdStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StdStorage__factory>;
    getContractFactory(
      name: "Vm",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Vm__factory>;
    getContractFactory(
      name: "DefiBridgeProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DefiBridgeProxy__factory>;
    getContractFactory(
      name: "ERC20Mintable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Mintable__factory>;
    getContractFactory(
      name: "RollupProcessor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RollupProcessor__factory>;
    getContractFactory(
      name: "AaveLendingBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveLendingBridge__factory>;
    getContractFactory(
      name: "IAToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAToken__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC20Detailed",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Detailed__factory>;
    getContractFactory(
      name: "ILendingPoolAddressesProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILendingPoolAddressesProvider__factory>;
    getContractFactory(
      name: "IPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPool__factory>;
    getContractFactory(
      name: "IScaledBalanceToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IScaledBalanceToken__factory>;
    getContractFactory(
      name: "IZkAToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IZkAToken__factory>;
    getContractFactory(
      name: "ZkAToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZkAToken__factory>;
    getContractFactory(
      name: "ElementBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ElementBridge__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPool__factory>;
    getContractFactory(
      name: "ITranche",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITranche__factory>;
    getContractFactory(
      name: "IVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVault__factory>;
    getContractFactory(
      name: "IWrappedPosition",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWrappedPosition__factory>;
    getContractFactory(
      name: "MinHeap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MinHeap__factory>;
    getContractFactory(
      name: "ExampleBridgeContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExampleBridgeContract__factory>;
    getContractFactory(
      name: "ICurvePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICurvePool__factory>;
    getContractFactory(
      name: "ILido",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILido__factory>;
    getContractFactory(
      name: "IRollupProcessor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRollupProcessor__factory>;
    getContractFactory(
      name: "IWstETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWstETH__factory>;
    getContractFactory(
      name: "LidoBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LidoBridge__factory>;
    getContractFactory(
      name: "IBorrowerOperations",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBorrowerOperations__factory>;
    getContractFactory(
      name: "ILiquityBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILiquityBase__factory>;
    getContractFactory(
      name: "ILQTYStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILQTYStaking__factory>;
    getContractFactory(
      name: "IPriceFeed",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPriceFeed__factory>;
    getContractFactory(
      name: "ISortedTroves",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISortedTroves__factory>;
    getContractFactory(
      name: "IStabilityPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStabilityPool__factory>;
    getContractFactory(
      name: "ISwapRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISwapRouter__factory>;
    getContractFactory(
      name: "ITroveManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITroveManager__factory>;
    getContractFactory(
      name: "StabilityPoolBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StabilityPoolBridge__factory>;
    getContractFactory(
      name: "StakingBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakingBridge__factory>;
    getContractFactory(
      name: "TroveBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TroveBridge__factory>;
    getContractFactory(
      name: "AggregatorV3Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AggregatorV3Interface__factory>;
    getContractFactory(
      name: "ICoinJoin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICoinJoin__factory>;
    getContractFactory(
      name: "IEthJoin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEthJoin__factory>;
    getContractFactory(
      name: "ISafeEngine",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISafeEngine__factory>;
    getContractFactory(
      name: "ISafeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISafeManager__factory>;
    getContractFactory(
      name: "RaiBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RaiBridge__factory>;
    getContractFactory(
      name: "IDefiBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDefiBridge__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IRollupProcessor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRollupProcessor__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "AaveTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveTest__factory>;
    getContractFactory(
      name: "RoundingTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RoundingTest__factory>;
    getContractFactory(
      name: "ElementTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ElementTest__factory>;
    getContractFactory(
      name: "HeapTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HeapTest__factory>;
    getContractFactory(
      name: "HeapTestContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HeapTestContract__factory>;
    getContractFactory(
      name: "ExampleTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExampleTest__factory>;
    getContractFactory(
      name: "LidoTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LidoTest__factory>;
    getContractFactory(
      name: "IHintHelpers",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IHintHelpers__factory>;
    getContractFactory(
      name: "StabilityPoolBridgeTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StabilityPoolBridgeTest__factory>;
    getContractFactory(
      name: "StabilityPoolBridgeTestInternal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StabilityPoolBridgeTestInternal__factory>;
    getContractFactory(
      name: "StakingBridgeTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakingBridgeTest__factory>;
    getContractFactory(
      name: "StakingBridgeTestInternal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakingBridgeTestInternal__factory>;
    getContractFactory(
      name: "TroveBridgeTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TroveBridgeTest__factory>;
    getContractFactory(
      name: "MockPriceFeed",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockPriceFeed__factory>;
    getContractFactory(
      name: "TestUtil",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestUtil__factory>;
    getContractFactory(
      name: "RaiBridgeTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RaiBridgeTest__factory>;

    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "DSTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DSTest>;
    getContractAt(
      name: "StdCheats",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StdCheats>;
    getContractAt(
      name: "StdError",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StdError>;
    getContractAt(
      name: "StdStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StdStorage>;
    getContractAt(
      name: "Vm",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Vm>;
    getContractAt(
      name: "DefiBridgeProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DefiBridgeProxy>;
    getContractAt(
      name: "ERC20Mintable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Mintable>;
    getContractAt(
      name: "RollupProcessor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RollupProcessor>;
    getContractAt(
      name: "AaveLendingBridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveLendingBridge>;
    getContractAt(
      name: "IAToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAToken>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC20Detailed",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Detailed>;
    getContractAt(
      name: "ILendingPoolAddressesProvider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILendingPoolAddressesProvider>;
    getContractAt(
      name: "IPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPool>;
    getContractAt(
      name: "IScaledBalanceToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IScaledBalanceToken>;
    getContractAt(
      name: "IZkAToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IZkAToken>;
    getContractAt(
      name: "ZkAToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZkAToken>;
    getContractAt(
      name: "ElementBridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ElementBridge>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPool>;
    getContractAt(
      name: "ITranche",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITranche>;
    getContractAt(
      name: "IVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVault>;
    getContractAt(
      name: "IWrappedPosition",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWrappedPosition>;
    getContractAt(
      name: "MinHeap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MinHeap>;
    getContractAt(
      name: "ExampleBridgeContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ExampleBridgeContract>;
    getContractAt(
      name: "ICurvePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICurvePool>;
    getContractAt(
      name: "ILido",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILido>;
    getContractAt(
      name: "IRollupProcessor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRollupProcessor>;
    getContractAt(
      name: "IWstETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWstETH>;
    getContractAt(
      name: "LidoBridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LidoBridge>;
    getContractAt(
      name: "IBorrowerOperations",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBorrowerOperations>;
    getContractAt(
      name: "ILiquityBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILiquityBase>;
    getContractAt(
      name: "ILQTYStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILQTYStaking>;
    getContractAt(
      name: "IPriceFeed",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPriceFeed>;
    getContractAt(
      name: "ISortedTroves",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISortedTroves>;
    getContractAt(
      name: "IStabilityPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStabilityPool>;
    getContractAt(
      name: "ISwapRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISwapRouter>;
    getContractAt(
      name: "ITroveManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITroveManager>;
    getContractAt(
      name: "StabilityPoolBridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StabilityPoolBridge>;
    getContractAt(
      name: "StakingBridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakingBridge>;
    getContractAt(
      name: "TroveBridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TroveBridge>;
    getContractAt(
      name: "AggregatorV3Interface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AggregatorV3Interface>;
    getContractAt(
      name: "ICoinJoin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICoinJoin>;
    getContractAt(
      name: "IEthJoin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEthJoin>;
    getContractAt(
      name: "ISafeEngine",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISafeEngine>;
    getContractAt(
      name: "ISafeManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISafeManager>;
    getContractAt(
      name: "RaiBridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RaiBridge>;
    getContractAt(
      name: "IDefiBridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDefiBridge>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IRollupProcessor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRollupProcessor>;
    getContractAt(
      name: "IWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "AaveTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveTest>;
    getContractAt(
      name: "RoundingTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RoundingTest>;
    getContractAt(
      name: "ElementTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ElementTest>;
    getContractAt(
      name: "HeapTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HeapTest>;
    getContractAt(
      name: "HeapTestContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HeapTestContract>;
    getContractAt(
      name: "ExampleTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ExampleTest>;
    getContractAt(
      name: "LidoTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LidoTest>;
    getContractAt(
      name: "IHintHelpers",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IHintHelpers>;
    getContractAt(
      name: "StabilityPoolBridgeTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StabilityPoolBridgeTest>;
    getContractAt(
      name: "StabilityPoolBridgeTestInternal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StabilityPoolBridgeTestInternal>;
    getContractAt(
      name: "StakingBridgeTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakingBridgeTest>;
    getContractAt(
      name: "StakingBridgeTestInternal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakingBridgeTestInternal>;
    getContractAt(
      name: "TroveBridgeTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TroveBridgeTest>;
    getContractAt(
      name: "MockPriceFeed",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockPriceFeed>;
    getContractAt(
      name: "TestUtil",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestUtil>;
    getContractAt(
      name: "RaiBridgeTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RaiBridgeTest>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
