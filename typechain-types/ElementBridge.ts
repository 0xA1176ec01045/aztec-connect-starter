/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace AztecTypes {
  export type AztecAssetStruct = {
    id: BigNumberish;
    erc20Address: string;
    assetType: BigNumberish;
  };

  export type AztecAssetStructOutput = [BigNumber, string, number] & {
    id: BigNumber;
    erc20Address: string;
    assetType: number;
  };
}

export interface ElementBridgeInterface extends utils.Interface {
  contractName: "ElementBridge";
  functions: {
    "assetToExpirys(address,uint256)": FunctionFragment;
    "convert((uint256,address,uint8),(uint256,address,uint8),(uint256,address,uint8),(uint256,address,uint8),uint256,uint256,uint64,address)": FunctionFragment;
    "finalise((uint256,address,uint8),(uint256,address,uint8),(uint256,address,uint8),(uint256,address,uint8),uint256,uint64)": FunctionFragment;
    "getAssetExpiries(address)": FunctionFragment;
    "hashAssetAndExpiry(address,uint64)": FunctionFragment;
    "interactions(uint256)": FunctionFragment;
    "pools(uint256)": FunctionFragment;
    "registerConvergentPoolAddress(address,address,uint64)": FunctionFragment;
    "rollupProcessor()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "assetToExpirys",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convert",
    values: [
      AztecTypes.AztecAssetStruct,
      AztecTypes.AztecAssetStruct,
      AztecTypes.AztecAssetStruct,
      AztecTypes.AztecAssetStruct,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "finalise",
    values: [
      AztecTypes.AztecAssetStruct,
      AztecTypes.AztecAssetStruct,
      AztecTypes.AztecAssetStruct,
      AztecTypes.AztecAssetStruct,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetExpiries",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hashAssetAndExpiry",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "interactions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pools", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "registerConvergentPoolAddress",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rollupProcessor",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "assetToExpirys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "convert", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "finalise", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAssetExpiries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashAssetAndExpiry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerConvergentPoolAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rollupProcessor",
    data: BytesLike
  ): Result;

  events: {
    "Convert(uint256,uint256)": EventFragment;
    "Finalise(uint256,bool,string)": EventFragment;
    "PoolAdded(address,address,uint64)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Convert"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Finalise"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolAdded"): EventFragment;
}

export type ConvertEvent = TypedEvent<
  [BigNumber, BigNumber],
  { nonce: BigNumber; totalInputValue: BigNumber }
>;

export type ConvertEventFilter = TypedEventFilter<ConvertEvent>;

export type FinaliseEvent = TypedEvent<
  [BigNumber, boolean, string],
  { nonce: BigNumber; success: boolean; message: string }
>;

export type FinaliseEventFilter = TypedEventFilter<FinaliseEvent>;

export type PoolAddedEvent = TypedEvent<
  [string, string, BigNumber],
  { poolAddress: string; wrappedPositionAddress: string; expiry: BigNumber }
>;

export type PoolAddedEventFilter = TypedEventFilter<PoolAddedEvent>;

export interface ElementBridge extends BaseContract {
  contractName: "ElementBridge";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ElementBridgeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    assetToExpirys(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    convert(
      inputAssetA: AztecTypes.AztecAssetStruct,
      arg1: AztecTypes.AztecAssetStruct,
      outputAssetA: AztecTypes.AztecAssetStruct,
      arg3: AztecTypes.AztecAssetStruct,
      totalInputValue: BigNumberish,
      interactionNonce: BigNumberish,
      auxData: BigNumberish,
      rollupBeneficiary: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finalise(
      inputAssetA: AztecTypes.AztecAssetStruct,
      inputAssetB: AztecTypes.AztecAssetStruct,
      outputAssetA: AztecTypes.AztecAssetStruct,
      outputAssetB: AztecTypes.AztecAssetStruct,
      interactionNonce: BigNumberish,
      auxData: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAssetExpiries(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { assetExpiries: BigNumber[] }>;

    hashAssetAndExpiry(
      asset: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    interactions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, boolean, boolean] & {
        quantityPT: BigNumber;
        trancheAddress: string;
        expiry: BigNumber;
        finalised: boolean;
        failed: boolean;
      }
    >;

    pools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        poolId: string;
        trancheAddress: string;
        poolAddress: string;
        wrappedPositionAddress: string;
      }
    >;

    registerConvergentPoolAddress(
      _convergentPool: string,
      _wrappedPosition: string,
      _expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rollupProcessor(overrides?: CallOverrides): Promise<[string]>;
  };

  assetToExpirys(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  convert(
    inputAssetA: AztecTypes.AztecAssetStruct,
    arg1: AztecTypes.AztecAssetStruct,
    outputAssetA: AztecTypes.AztecAssetStruct,
    arg3: AztecTypes.AztecAssetStruct,
    totalInputValue: BigNumberish,
    interactionNonce: BigNumberish,
    auxData: BigNumberish,
    rollupBeneficiary: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finalise(
    inputAssetA: AztecTypes.AztecAssetStruct,
    inputAssetB: AztecTypes.AztecAssetStruct,
    outputAssetA: AztecTypes.AztecAssetStruct,
    outputAssetB: AztecTypes.AztecAssetStruct,
    interactionNonce: BigNumberish,
    auxData: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAssetExpiries(
    asset: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  hashAssetAndExpiry(
    asset: string,
    expiry: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  interactions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, boolean, boolean] & {
      quantityPT: BigNumber;
      trancheAddress: string;
      expiry: BigNumber;
      finalised: boolean;
      failed: boolean;
    }
  >;

  pools(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string] & {
      poolId: string;
      trancheAddress: string;
      poolAddress: string;
      wrappedPositionAddress: string;
    }
  >;

  registerConvergentPoolAddress(
    _convergentPool: string,
    _wrappedPosition: string,
    _expiry: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rollupProcessor(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    assetToExpirys(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convert(
      inputAssetA: AztecTypes.AztecAssetStruct,
      arg1: AztecTypes.AztecAssetStruct,
      outputAssetA: AztecTypes.AztecAssetStruct,
      arg3: AztecTypes.AztecAssetStruct,
      totalInputValue: BigNumberish,
      interactionNonce: BigNumberish,
      auxData: BigNumberish,
      rollupBeneficiary: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        outputValueA: BigNumber;
        outputValueB: BigNumber;
        isAsync: boolean;
      }
    >;

    finalise(
      inputAssetA: AztecTypes.AztecAssetStruct,
      inputAssetB: AztecTypes.AztecAssetStruct,
      outputAssetA: AztecTypes.AztecAssetStruct,
      outputAssetB: AztecTypes.AztecAssetStruct,
      interactionNonce: BigNumberish,
      auxData: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        outputValueA: BigNumber;
        outputValueB: BigNumber;
        interactionCompleted: boolean;
      }
    >;

    getAssetExpiries(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    hashAssetAndExpiry(
      asset: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    interactions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, boolean, boolean] & {
        quantityPT: BigNumber;
        trancheAddress: string;
        expiry: BigNumber;
        finalised: boolean;
        failed: boolean;
      }
    >;

    pools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        poolId: string;
        trancheAddress: string;
        poolAddress: string;
        wrappedPositionAddress: string;
      }
    >;

    registerConvergentPoolAddress(
      _convergentPool: string,
      _wrappedPosition: string,
      _expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rollupProcessor(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Convert(uint256,uint256)"(
      nonce?: BigNumberish | null,
      totalInputValue?: null
    ): ConvertEventFilter;
    Convert(
      nonce?: BigNumberish | null,
      totalInputValue?: null
    ): ConvertEventFilter;

    "Finalise(uint256,bool,string)"(
      nonce?: BigNumberish | null,
      success?: null,
      message?: null
    ): FinaliseEventFilter;
    Finalise(
      nonce?: BigNumberish | null,
      success?: null,
      message?: null
    ): FinaliseEventFilter;

    "PoolAdded(address,address,uint64)"(
      poolAddress?: null,
      wrappedPositionAddress?: null,
      expiry?: null
    ): PoolAddedEventFilter;
    PoolAdded(
      poolAddress?: null,
      wrappedPositionAddress?: null,
      expiry?: null
    ): PoolAddedEventFilter;
  };

  estimateGas: {
    assetToExpirys(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convert(
      inputAssetA: AztecTypes.AztecAssetStruct,
      arg1: AztecTypes.AztecAssetStruct,
      outputAssetA: AztecTypes.AztecAssetStruct,
      arg3: AztecTypes.AztecAssetStruct,
      totalInputValue: BigNumberish,
      interactionNonce: BigNumberish,
      auxData: BigNumberish,
      rollupBeneficiary: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finalise(
      inputAssetA: AztecTypes.AztecAssetStruct,
      inputAssetB: AztecTypes.AztecAssetStruct,
      outputAssetA: AztecTypes.AztecAssetStruct,
      outputAssetB: AztecTypes.AztecAssetStruct,
      interactionNonce: BigNumberish,
      auxData: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAssetExpiries(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashAssetAndExpiry(
      asset: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    interactions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pools(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    registerConvergentPoolAddress(
      _convergentPool: string,
      _wrappedPosition: string,
      _expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rollupProcessor(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    assetToExpirys(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convert(
      inputAssetA: AztecTypes.AztecAssetStruct,
      arg1: AztecTypes.AztecAssetStruct,
      outputAssetA: AztecTypes.AztecAssetStruct,
      arg3: AztecTypes.AztecAssetStruct,
      totalInputValue: BigNumberish,
      interactionNonce: BigNumberish,
      auxData: BigNumberish,
      rollupBeneficiary: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finalise(
      inputAssetA: AztecTypes.AztecAssetStruct,
      inputAssetB: AztecTypes.AztecAssetStruct,
      outputAssetA: AztecTypes.AztecAssetStruct,
      outputAssetB: AztecTypes.AztecAssetStruct,
      interactionNonce: BigNumberish,
      auxData: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAssetExpiries(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashAssetAndExpiry(
      asset: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    interactions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerConvergentPoolAddress(
      _convergentPool: string,
      _wrappedPosition: string,
      _expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rollupProcessor(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
